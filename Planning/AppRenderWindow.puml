@startuml RendererAndWindow

hide empty members
hide empty methods
skinparam packageStyle Frame
skinparam PackageBackgroundColor Lavender


enum RenderAPI {
        OpenGL    
        DirectX
    }


package Render {
    interface RenderCommand {
        void Clear()
        void SetClearColor()
        void DrawVertexArray()
        void DrawIndexed()
        ...()
    }

    OpenGLRenderCommand --|> RenderCommand

    class Render {
        RenderAPI s_renderAPI
        RenderCommand* s_renderCommand;

        static void Init() (determine api to use)
        static void Clear()
        static void SetClearColor()
        static void DrawVertexArray()
        static void DrawIndexed()
        ...()
    }

    RenderCommand --* Render
    RenderAPI -- Render
}


package Window {
    enum WindowProvider {
        GLFW
        Windows
        Linux
    }

    abstract class Window {
        WindowProvider s_windowProvider
        RenderContext m_context
        static void Init() (determine WindowProvider)
        static Window Create() (get impl)
        SetCallbackFunc()
        Update(poll, swap buffers)
    }

    GLFWWindow --|> Window

    abstract class RenderContext {
        static RenderContext Create() (get impl)
        Setup()
        SetCurrentWindow(Window w)
        SwapBuffers(window)
    }

    OpenGLGLFWRenderContext --|> RenderContext
    RenderContext --* Window
    Window -- WindowProvider
    RenderContext -- WindowProvider
    RenderContext -- RenderAPI 
}


package Application {
    abstract class Application {
        m_window


        MainOnUpdate()
        MainOnRender()
        MainOnEvent()

        Run()

        OnUpdate() = 0
        OnRender() = 0
        OnEvent() = 0
    }

    class UserApplication {
        OnUpdate() (implements)
        OnRender() (implements)
    }

    UserApplication --|> Application
    Window --* Application
    Application -- Render
}




@enduml

